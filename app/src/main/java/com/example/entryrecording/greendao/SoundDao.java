package com.example.entryrecording.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.entryrecording.bean.Sound;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOUND".
*/
public class SoundDao extends AbstractDao<Sound, String> {

    public static final String TABLENAME = "SOUND";

    /**
     * Properties of entity Sound.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property S_id = new Property(0, String.class, "s_id", true, "S_ID");
        public final static Property S_name = new Property(1, String.class, "s_name", false, "S_NAME");
        public final static Property S_time = new Property(2, String.class, "s_time", false, "S_TIME");
        public final static Property S_path = new Property(3, String.class, "s_path", false, "S_PATH");
        public final static Property S_createtime = new Property(4, String.class, "s_createtime", false, "S_CREATETIME");
        public final static Property S_filetype = new Property(5, String.class, "s_filetype", false, "S_FILETYPE");
        public final static Property S_entryid = new Property(6, String.class, "s_entryid", false, "S_ENTRYID");
        public final static Property S_baseid = new Property(7, String.class, "s_baseid", false, "S_BASEID");
        public final static Property S_spare1 = new Property(8, String.class, "s_spare1", false, "S_SPARE1");
        public final static Property S_spare2 = new Property(9, String.class, "s_spare2", false, "S_SPARE2");
    }


    public SoundDao(DaoConfig config) {
        super(config);
    }
    
    public SoundDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOUND\" (" + //
                "\"S_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: s_id
                "\"S_NAME\" TEXT," + // 1: s_name
                "\"S_TIME\" TEXT," + // 2: s_time
                "\"S_PATH\" TEXT," + // 3: s_path
                "\"S_CREATETIME\" TEXT," + // 4: s_createtime
                "\"S_FILETYPE\" TEXT," + // 5: s_filetype
                "\"S_ENTRYID\" TEXT," + // 6: s_entryid
                "\"S_BASEID\" TEXT," + // 7: s_baseid
                "\"S_SPARE1\" TEXT," + // 8: s_spare1
                "\"S_SPARE2\" TEXT);"); // 9: s_spare2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOUND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sound entity) {
        stmt.clearBindings();
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(1, s_id);
        }
 
        String s_name = entity.getS_name();
        if (s_name != null) {
            stmt.bindString(2, s_name);
        }
 
        String s_time = entity.getS_time();
        if (s_time != null) {
            stmt.bindString(3, s_time);
        }
 
        String s_path = entity.getS_path();
        if (s_path != null) {
            stmt.bindString(4, s_path);
        }
 
        String s_createtime = entity.getS_createtime();
        if (s_createtime != null) {
            stmt.bindString(5, s_createtime);
        }
 
        String s_filetype = entity.getS_filetype();
        if (s_filetype != null) {
            stmt.bindString(6, s_filetype);
        }
 
        String s_entryid = entity.getS_entryid();
        if (s_entryid != null) {
            stmt.bindString(7, s_entryid);
        }
 
        String s_baseid = entity.getS_baseid();
        if (s_baseid != null) {
            stmt.bindString(8, s_baseid);
        }
 
        String s_spare1 = entity.getS_spare1();
        if (s_spare1 != null) {
            stmt.bindString(9, s_spare1);
        }
 
        String s_spare2 = entity.getS_spare2();
        if (s_spare2 != null) {
            stmt.bindString(10, s_spare2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sound entity) {
        stmt.clearBindings();
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(1, s_id);
        }
 
        String s_name = entity.getS_name();
        if (s_name != null) {
            stmt.bindString(2, s_name);
        }
 
        String s_time = entity.getS_time();
        if (s_time != null) {
            stmt.bindString(3, s_time);
        }
 
        String s_path = entity.getS_path();
        if (s_path != null) {
            stmt.bindString(4, s_path);
        }
 
        String s_createtime = entity.getS_createtime();
        if (s_createtime != null) {
            stmt.bindString(5, s_createtime);
        }
 
        String s_filetype = entity.getS_filetype();
        if (s_filetype != null) {
            stmt.bindString(6, s_filetype);
        }
 
        String s_entryid = entity.getS_entryid();
        if (s_entryid != null) {
            stmt.bindString(7, s_entryid);
        }
 
        String s_baseid = entity.getS_baseid();
        if (s_baseid != null) {
            stmt.bindString(8, s_baseid);
        }
 
        String s_spare1 = entity.getS_spare1();
        if (s_spare1 != null) {
            stmt.bindString(9, s_spare1);
        }
 
        String s_spare2 = entity.getS_spare2();
        if (s_spare2 != null) {
            stmt.bindString(10, s_spare2);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Sound readEntity(Cursor cursor, int offset) {
        Sound entity = new Sound( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // s_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // s_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // s_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // s_path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // s_createtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // s_filetype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // s_entryid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // s_baseid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // s_spare1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // s_spare2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sound entity, int offset) {
        entity.setS_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setS_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setS_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_createtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_filetype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setS_entryid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setS_baseid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setS_spare1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setS_spare2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Sound entity, long rowId) {
        return entity.getS_id();
    }
    
    @Override
    public String getKey(Sound entity) {
        if(entity != null) {
            return entity.getS_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sound entity) {
        return entity.getS_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
